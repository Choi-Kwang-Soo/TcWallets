{"version":3,"sources":["Constants.js","Components/Home.js","Components/Wallets.js","Components/Wallets/SendScreen.js","Components/Wallets/ActivityScreen.js","Components/Accounts/CreateAccount.js","Components/Accounts/ConnectAccount.js","Components/Wallets/ConfirmScreen.js","Navigators.js","App.js","img/logo_h.png","img/logo.png"],"names":["SERVER_URL","SCREEN_WIDTH","Dimensions","get","width","LoadingScreen","View","style","alignItems","justifyContent","ActivityIndicator","size","color","marginTop","styles","StyleSheet","create","container","flex","backgroundColor","tinyLog","height","resizeMode","button","paddingVertical","paddingHorizontal","borderRadius","textShadowColor","textShadowOffset","textShadowRadius","text","fontSize","lineHeight","fontWeight","letterSpacing","HomeScreen","navigation","route","console","log","Image","source","require","TouchableOpacity","onPress","navigate","params","userList","Text","infoBox","marginBottom","marginHorizontal","infoLab","marginRight","infoVal","btnBox","marginVertical","WalletScreen","account","React","setAccount","loading","setLoading","getBalance","a","async","fetch","address","response","json","resCode","code","setNotify","message","balance","data","AsyncStorage","setItem","JSON","stringify","flexDirection","substring","Platform","OS","confirm","removeItem","Alert","alert","SendScreen","setUserList","selected","setSelected","getUserLists","input","onPressOut","ScrollView","Object","keys","map","key","userListName","userListAddr","onSelectPress","Fontisto","name","ActivityScreen","Button","title","goBack","CreateAccountScreen","userName","setUserName","passwd","setPasswd","notify","loadToUserList","getItem","rawData","parse","usrlist","onCheckAccount","length","setTimeout","createAccount","ac","password","newUserList","notifyTxt","TextInput","onSubmitEditing","onChangeText","payload","returnKeyType","value","placeholder","secureTextEntry","ConnectAccountScreen","connectAccount","findAc","filter","item","ConfirmScreen","target","setTarget","setBalance","transfer","targetAddree","amount","onTransfer","marginLeft","WholeStack","createNativeStackNavigator","LogoIconTitle","WelcomeScreen","NavigationContainer","Navigator","initialRouteName","Group","Screen","component","initialParams","options","headerShown","headerTitle","headerStyle","headerTintColor","headerTitleStyle","WalletsScreen","AccountScreen","App","loadToAccount","module","exports"],"mappings":"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","file":"static/js/app.7abbe745.chunk.js","sourcesContent":["import { Dimensions, View, ActivityIndicator } from \"react-native\";\n\n/* Constants */\nexport const SERVER_URL = \"http://15.165.64.230:7003\";\n\nexport const STORAGE_KEY = \"@accounts\";\nexport const STORAGE_KEY_USERLIST = \"@userlist\";\n\nexport const { width: SCREEN_WIDTH } = Dimensions.get(\"window\");\n\nexport function LoadingScreen() {\n  return (\n    <View style={{ alignItems: \"center\", justifyContent: \"center\" }}>\n      <ActivityIndicator\n        size={\"large\"}\n        color=\"tomato\"\n        style={{ marginTop: 150 }}\n      />\n    </View>\n  );\n}\n","import * as React from \"react\";\nimport { View, Text, StyleSheet, TouchableOpacity, Image } from \"react-native\";\n\nfunction HomeScreen({ navigation, route }) {\n  console.log(\"home-scr, rePaint\", route);\n\n  return (\n    <View style={styles.container}>\n      <View style={{ flex: 2, marginTop: 100 }}>\n        <Image style={styles.tinyLog} source={require(\"../img/logo.png\")} />\n      </View>\n      <View style={{ flex: 4, justifyContent: \"flex-start\" }}>\n        <TouchableOpacity\n          style={styles.button}\n          onPress={() =>\n            navigation.navigate(\"CreateAccount\", route.params.userList)\n          }\n        >\n          <Text style={styles.text}>Account Creation</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={styles.button}\n          onPress={() =>\n            navigation.navigate(\"ConnectAccount\", route.params.userList)\n          }\n        >\n          <Text style={styles.text}>Account Connect</Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <Image style={styles.tinyLog} source={require(\"../img/logo_h.png\")} />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    backgroundColor: \"white\",\n    alignItems: \"center\",\n  },\n  tinyLog: {\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    width: 100,\n    height: 100,\n    resizeMode: \"contain\",\n  },\n  button: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingVertical: 10,\n    paddingHorizontal: 25,\n    borderRadius: 20,\n    backgroundColor: \"white\",\n    textShadowColor: \"gray\",\n    textShadowOffset: {\n      width: 4,\n      height: 4,\n    },\n    textShadowRadius: 7,\n  },\n  text: {\n    fontSize: 20,\n    lineHeight: 30,\n    fontWeight: \"bold\",\n    letterSpacing: 0.25,\n    color: \"tomato\",\n  },\n});\n\nexport default HomeScreen;\n","import * as React from \"react\";\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TouchableOpacity,\n  Alert,\n  Image,\n  Platform,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { LoadingScreen, SERVER_URL } from \"../Constants\";\nimport { STORAGE_KEY } from \"../Constants\";\n\nfunction WalletScreen({ navigation, route }) {\n  console.log(\"wallerts-scr - rePaint\", route, account);\n\n  const [account, setAccount] = React.useState(route.params.account);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    console.log(\"useEffect\", route);\n    if (route.params) {\n      console.log(\"route.params.account\", route.params.account);\n      getBalance(route.params.account);\n    }\n  }, [route.params]);\n\n  const getBalance = async (account) => {\n    console.log(\"getBalance\", account);\n\n    /* 계정 생성 : Cron-Domain 이슈를 서버에서 해결 */\n    const response = await fetch(\n      `${SERVER_URL}/v1/rpc/eth/balance/${account.address}`\n    );\n    const json = await response.json();\n\n    console.log(\"getBalance\", json);\n\n    const resCode = json.code;\n    if (resCode !== 200) {\n      setNotify(resCode + \" : \" + json.message);\n      return;\n    }\n\n    /** 지갑으로 이동\n     *  \"data\": {\n     *     \"balance\": 0.297922299998425\n     *  },\n     */\n    console.log(\"getBalance\", account);\n\n    if (account !== null) {\n      account.balance = json.data.balance;\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(account));\n      setAccount(account);\n      setLoading(false);\n    }\n  };\n\n  const onLogout = async () => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Account LogOut?\");\n      if (ok) {\n        await AsyncStorage.removeItem(STORAGE_KEY);\n        setAccount(null);\n        navigation.navigate(\"Home\");\n      }\n    } else {\n      Alert.alert(\"Account LogOut\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          onPress: async () => {\n            await AsyncStorage.removeItem(STORAGE_KEY);\n            setAccount(null);\n            navigation.navigate(\"Home\");\n          },\n        },\n      ]);\n    }\n  };\n\n  return (\n    <>\n      {loading ? (\n        <LoadingScreen />\n      ) : (\n        <View style={styles.container}>\n          {account !== null ? (\n            <View style={styles.infoBox}>\n              <View style={{ flexDirection: \"row\", paddingVertical: 10 }}>\n                <Text style={styles.infoLab}>UserName</Text>\n                <Text style={styles.infoVal}>{`${account.account}`}</Text>\n              </View>\n              <View style={{ flexDirection: \"row\", paddingVertical: 10 }}>\n                <Text style={styles.infoLab}>Address</Text>\n                <Text style={styles.infoVal}>\n                  {`${account.address.substring(0, 15)}`}...\n                </Text>\n              </View>\n              <View style={{ flexDirection: \"row\", paddingVertical: 10 }}>\n                <Text style={styles.infoLab}>Balance</Text>\n                <Text style={styles.infoVal}>{`${account.balance}`} ETH</Text>\n              </View>\n            </View>\n          ) : (\n            <View style={styles.infoBox} />\n          )}\n          <View style={styles.btnBox}>\n            <TouchableOpacity\n              style={styles.button}\n              onPress={() => navigation.navigate(\"Send\", { account })}\n            >\n              <Text style={styles.text}>Transfer</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={styles.button}\n              onPress={() => navigation.navigate(\"Activity\")}\n            >\n              <Text style={styles.text}>Activity</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.button} onPress={onLogout}>\n              <Text style={styles.text}>Logout</Text>\n            </TouchableOpacity>\n          </View>\n          <View\n            style={{\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              marginTop: \"100%\",\n            }}\n          >\n            <Image\n              style={styles.tinyLog}\n              source={require(\"../img/logo_h.png\")}\n            />\n          </View>\n        </View>\n      )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\",\n  },\n  infoBox: {\n    height: 200,\n    backgroundColor: \"white\",\n    marginTop: 10,\n    marginBottom: 5,\n    marginHorizontal: 5,\n    paddingVertical: 5,\n    paddingHorizontal: 5,\n    borderRadius: 5,\n  },\n  infoLab: {\n    fontSize: 20,\n    backgroundColor: \"white\",\n    color: \"tomato\",\n    width: 100,\n    borderRadius: 5,\n    paddingVertical: 5,\n    marginRight: 10,\n    textShadowColor: \"gray\",\n    textShadowOffset: {\n      width: 4,\n      height: 4,\n    },\n    textShadowRadius: 7,\n  },\n  infoVal: {\n    fontSize: 20,\n    backgroundColor: \"gray\",\n    color: \"white\",\n    // width: 500,\n    borderRadius: 5,\n    paddingVertical: 5,\n    paddingHorizontal: 5,\n  },\n  btnBox: {\n    flex: 2,\n    backgroundColor: \"white\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n  },\n  tinyLog: {\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    width: 100,\n    height: 100,\n  },\n  button: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingVertical: 10,\n    paddingHorizontal: 25,\n    borderRadius: 20,\n    backgroundColor: \"white\",\n    marginVertical: 5,\n    textShadowColor: \"gray\",\n    textShadowOffset: {\n      width: 4,\n      height: 4,\n    },\n    textShadowRadius: 7,\n    width: 200,\n    height: 50,\n  },\n  text: {\n    fontSize: 20,\n    lineHeight: 30,\n    fontWeight: \"bold\",\n    letterSpacing: 0.25,\n    color: \"tomato\",\n  },\n  tinyLog: {\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    width: 100,\n    height: 100,\n    resizeMode: \"contain\",\n  },\n});\n\nexport default WalletScreen;\n","import * as React from \"react\";\nimport {\n  View,\n  Text,\n  ScrollView,\n  StyleSheet,\n  Image,\n  TouchableOpacity,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport { SERVER_URL, SCREEN_WIDTH } from \"../../Constants\";\n\nfunction SendScreen({ navigation, route }) {\n  console.log(\"send-scr, rePaint\", route, account, userList, SCREEN_WIDTH);\n\n  const [userList, setUserList] = React.useState(null);\n  const [account, setAccount] = React.useState(null);\n  const [selected, setSelected] = React.useState(null);\n\n  const getUserLists = async () => {\n    /* 계정 생성 : Cron-Domain 이슈를 서버에서 해결 */\n    const response = await fetch(`${SERVER_URL}/v1/rpc/eth/account/list`);\n    const json = await response.json();\n\n    console.log(\"getUserLists\", json);\n\n    const resCode = json.code;\n    if (resCode !== 200) {\n      setNotify(resCode + \" : \" + json.message);\n      return;\n    }\n\n    /** 지갑으로 이동\n      \"data\": [\n          {\n              \"account\": \"trackchain\",\n              \"address\": \"0xfbe355ec1de4a4f1d255eac6a26215e2d64e6291\",\n              \"balance\": 0.098953799999496\n          },\n          {\n              \"account\": \"test\",\n              \"address\": \"0x6b13c1635cc62300085f55a78d9a662c3e1cacfb\",\n              \"balance\": 0.003\n          },\n          {\n              \"account\": \"maxchoi\",\n              \"address\": \"0xa97200131b571cd6ee9807b7a5b7f5d93278cd4a\",\n              \"balance\": 0\n          }\n        }\n     */\n    console.log(\"json.data\", json.data);\n    setUserList(json.data);\n  };\n\n  const onSelectPress = (key) => {\n    if (selected !== null && userList[key].address === selected.address) {\n      setSelected(null);\n    } else {\n      setSelected(userList[key]);\n    }\n  };\n\n  const onGotoConfirm = () => {\n    if (selected !== null) {\n      navigation.navigate(\"Confirm\", {\n        account,\n        selected,\n      });\n    }\n  };\n\n  React.useEffect(() => {\n    console.log(\"useEffect\", route);\n    if (route.params) {\n      console.log(\"route.params.account\", route.params.account);\n      setAccount(route.params.account);\n    }\n\n    getUserLists();\n  }, [route.params.account]);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        backgroundColor: \"white\",\n      }}\n    >\n      <View\n        style={{\n          flex: 0.2,\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text style={styles.input}>Please, Select Transfer-Account</Text>\n        <TouchableOpacity onPressOut={onGotoConfirm}>\n          <Text style={styles.input}>Next</Text>\n        </TouchableOpacity>\n      </View>\n      <ScrollView style={{ flex: 0.8 }}>\n        {userList !== null ? (\n          Object.keys(userList).map((key) => (\n            <View style={styles.userList} key={key}>\n              <Text style={styles.userListName}>{userList[key].account}</Text>\n              <Text style={styles.userListAddr}>\n                {userList[key].address.substring(0, 15)}...\n              </Text>\n              {userList[key].account !== account.account ? (\n                <TouchableOpacity onPressOut={() => onSelectPress(key)}>\n                  {selected !== null &&\n                  selected.address === userList[key].address ? (\n                    <Fontisto name=\"checkbox-active\" size={18} color=\"gray\" />\n                  ) : (\n                    <Fontisto name=\"checkbox-passive\" size={18} color=\"gray\" />\n                  )}\n                </TouchableOpacity>\n              ) : (\n                <Text />\n              )}\n            </View>\n          ))\n        ) : (\n          <View />\n        )}\n        <View\n          style={{\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Image\n            style={styles.tinyLog}\n            source={require(\"../../img/logo_h.png\")}\n          />\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\nexport default SendScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#1A1C20\",\n    paddingHorizontal: 20,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 10,\n    paddingHorizontal: 10,\n    borderRadius: 5,\n    marginVertical: 10,\n    marginHorizontal: 10,\n    color: \"tomato\",\n    // resizeMode: \"contain\",\n    textShadowColor: \"gray\",\n    textShadowOffset: {\n      width: 4,\n      height: 4,\n    },\n    textShadowRadius: 7,\n  },\n  userList: {\n    backgroundColor: \"#1A1C20\",\n    marginBottom: 10,\n    marginHorizontal: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    width: SCREEN_WIDTH - 20,\n  },\n  userListName: {\n    color: \"white\",\n    fontWeight: \"200\",\n    width: 100,\n  },\n  userListAddr: {\n    color: \"white\",\n    fontWeight: \"600\",\n  },\n  tinyLog: {\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    width: 100,\n    height: 100,\n    resizeMode: \"contain\",\n  },\n});\n","import * as React from \"react\";\nimport { View, Text, Button } from \"react-native\";\n\nfunction ActivityScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n      <Text>Activity Screen</Text>\n      <Button title=\"Go to Walltes\" onPress={() => navigation.goBack()} />\n    </View>\n  );\n}\n\nexport default ActivityScreen;\n","import * as React from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  Image,\n  ActivityIndicator,\n  TouchableOpacity,\n} from \"react-native\";\n\n/* Local Storage */\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { SERVER_URL, STORAGE_KEY, STORAGE_KEY_USERLIST } from \"../../Constants\";\n\nfunction CreateAccountScreen({ navigation, route }) {\n  console.log(\"cret-scr, rePaint!!!!\", route, loading);\n\n  const [userName, setUserName] = React.useState(\"\");\n  const [passwd, setPasswd] = React.useState(\"\");\n  const [notify, setNotify] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n  const [userList, setUserList] = React.useState(route.params.userList);\n\n  /* 최초 로컬에 저정된 사용자 정보 가져오기 */\n  React.useEffect(() => {\n    async function fetchData() {\n      loadToUserList();\n    }\n    fetchData();\n  }, []);\n\n  /**\n   * 사용자 리스트 정보 조회\n   */\n  const loadToUserList = async () => {\n    const rawData = await AsyncStorage.getItem(STORAGE_KEY_USERLIST);\n    console.log(\"loadToUserList:\", rawData);\n    if (rawData !== null) {\n      const usrlist = await JSON.parse(rawData);\n      console.log(\"loadToUserList:\", usrlist);\n      setUserList(usrlist);\n    }\n  };\n\n  const onChangeUserName = (payload) => {\n    setUserName(payload);\n  };\n\n  const onChangePasswd = (payload) => {\n    setPasswd(payload);\n  };\n\n  const onCheckAccount = () => {\n    if (userName.length < 4 && passwd.length < 8) {\n      setNotify(\n        \"Account는 최소 4자이상, Passwd는 최소 8자이상 입력해야 합니다.\"\n      );\n      return;\n    }\n\n    /* 로딩 시작 */\n    setLoading(true);\n\n    /* Delay */\n    setTimeout(() => createAccount(userName, passwd), 1000);\n  };\n\n  const createAccount = async (userName, passwd) => {\n    /* 계정 생성 : Cron-Domain 이슈를 서버에서 해결 */\n    const response = await fetch(\n      `${SERVER_URL}/v1/rpc/eth/address/${userName}?password=${passwd}`\n    );\n    const json = await response.json();\n    console.log(\"createAccount\", json);\n    const resCode = json.code;\n\n    /* 비동기 처리 필요 */\n    setLoading(false);\n\n    if (resCode !== 200) {\n      setNotify(resCode + \" : \" + json.message);\n      return;\n    }\n\n    /** 지갑으로 이동\n     *  \"data\": {\n     *    \"account\": \"trackchain\",\n     *    \"address\": \"0xdd28dfc015f9c9c1f3d77aeb6a85d66720c505d3\",\n     *    \"password\": \"1234\",\n     *    \"balance\": 0\n     *  },\n     */\n    const ac = {\n      account: json.data.account,\n      address: json.data.address,\n      password: json.data.password,\n      balance: json.data.balance,\n    };\n    console.log(\"account\", ac);\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(ac));\n\n    const newUserList = [...userList, ac];\n    console.log(\"userList\", newUserList);\n    await AsyncStorage.setItem(\n      STORAGE_KEY_USERLIST,\n      JSON.stringify(newUserList)\n    );\n\n    navigation.navigate(\"Wallets\", { account: ac, userList: newUserList });\n  };\n\n  return (\n    <View style={styles.container}>\n      {loading ? (\n        <View style={{ alignItems: \"center\", justifyContent: \"center\" }}>\n          <ActivityIndicator\n            size={\"large\"}\n            color=\"tomato\"\n            style={{ marginTop: 150 }}\n          />\n        </View>\n      ) : (\n        <View>\n          <Text style={styles.notifyTxt}>\n            ID: {userName}, PW: {passwd} : {notify}\n          </Text>\n          <TextInput\n            onSubmitEditing={onCheckAccount}\n            onChangeText={onChangeUserName}\n            returnKeyType=\"default\"\n            value={userName}\n            placeholder={\"Please, Write Account...\"}\n            style={styles.input}\n          />\n          <TextInput\n            onSubmitEditing={onCheckAccount}\n            onChangeText={onChangePasswd}\n            returnKeyType=\"done\"\n            secureTextEntry={true}\n            value={passwd}\n            placeholder={\"Please, Write Password...\"}\n            style={styles.input}\n          />\n          <TouchableOpacity style={styles.button} onPress={onCheckAccount}>\n            <Text style={styles.text}>Creation</Text>\n          </TouchableOpacity>\n          <View\n            style={{\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              marginTop: \"100%\",\n            }}\n          >\n            <Image\n              style={styles.tinyLog}\n              source={require(\"../../img/logo_h.png\")}\n            />\n          </View>\n        </View>\n      )}\n    </View>\n  );\n}\n\nexport default CreateAccountScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\",\n  },\n  input: {\n    backgroundColor: \"tomato\",\n    marginHorizontal: 5,\n    marginVertical: 5,\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    borderRadius: 25,\n    fontSize: 18,\n    color: \"white\",\n  },\n  notifyTxt: {\n    backgroundColor: \"gray\",\n    marginTop: 10,\n    marginBottom: 5,\n    marginHorizontal: 5,\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    borderRadius: 15,\n  },\n  button: {\n    alignItems: \"flex-end\",\n    justifyContent: \"center\",\n    paddingVertical: 10,\n    paddingHorizontal: 25,\n    borderRadius: 20,\n    backgroundColor: \"white\",\n    textShadowColor: \"#3A3D40\",\n    textShadowOffset: {\n      width: 4,\n      height: 4,\n    },\n    textShadowRadius: 7,\n  },\n  text: {\n    fontSize: 20,\n    lineHeight: 30,\n    fontWeight: \"bold\",\n    letterSpacing: 0.25,\n    color: \"tomato\",\n  },\n  tinyLog: {\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    width: 100,\n    height: 100,\n    resizeMode: \"contain\",\n  },\n});\n","import * as React from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  ActivityIndicator,\n  TouchableOpacity,\n  Image,\n} from \"react-native\";\n\n/* Local Storage */\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { SERVER_URL, STORAGE_KEY, STORAGE_KEY_USERLIST } from \"../../Constants\";\n\nfunction ConnectAccountScreen({ navigation, route }) {\n  console.log(\"conn-scr, rePaint!!!!\", route, loading);\n\n  const [userName, setUserName] = React.useState(\"\");\n  const [passwd, setPasswd] = React.useState(\"\");\n  const [notify, setNotify] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n\n  const [userList, setUserList] = React.useState(route.params.userList);\n\n  /* 최초 로컬에 저정된 사용자 정보 가져오기 */\n  React.useEffect(() => {\n    async function fetchData() {\n      loadToUserList();\n    }\n    fetchData();\n  }, []);\n\n  /**\n   * 사용자 리스트 정보 조회\n   */\n  const loadToUserList = async () => {\n    const rawData = await AsyncStorage.getItem(STORAGE_KEY_USERLIST);\n    console.log(\"loadToUserList:\", rawData);\n    if (rawData !== null) {\n      const usrlist = await JSON.parse(rawData);\n      console.log(\"loadToUserList:\", usrlist);\n      setUserList(usrlist);\n    }\n  };\n  const onChangeUserName = (payload) => {\n    setUserName(payload);\n  };\n\n  const onChangePasswd = (payload) => {\n    setPasswd(payload);\n  };\n\n  const onCheckAccount = () => {\n    if (userName.length < 4 && passwd.length < 8) {\n      setNotify(\n        \"Account는 최소 4자이상, Passwd는 최소 8자이상 입력해야 합니다.\"\n      );\n      return;\n    }\n\n    /* 로딩 시작 */\n    setLoading(true);\n\n    /* Delay */\n    setTimeout(() => connectAccount(userName, passwd), 1000);\n  };\n\n  const connectAccount = async (userName, passwd) => {\n    const findAc = userList.filter(\n      (item) => item.account === userName && item.password === passwd\n    );\n    console.log(\"connectAccount\", findAc);\n\n    /* 비동기 처리 필요 */\n    setLoading(false);\n\n    if (findAc.length === 0) {\n      setNotify(\"이전에 생성한 지갑정보를 로컬이력에서 찾을 수 없습니다.\");\n      return;\n    }\n\n    const account = findAc[0];\n    console.log(\"account\", account);\n\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(account));\n\n    navigation.navigate(\"Wallets\", { account, userList });\n  };\n\n  return (\n    <View style={styles.container}>\n      {loading ? (\n        <View style={{ alignItems: \"center\", justifyContent: \"center\" }}>\n          <ActivityIndicator\n            size={\"large\"}\n            color=\"tomato\"\n            style={{ marginTop: 150 }}\n          />\n        </View>\n      ) : (\n        <View>\n          <Text style={styles.notifyTxt}>\n            ID: {userName}, PW: {passwd} : {notify}\n          </Text>\n          <TextInput\n            onSubmitEditing={onCheckAccount}\n            onChangeText={onChangeUserName}\n            returnKeyType=\"default\"\n            value={userName}\n            placeholder={\"Please, Write Account...\"}\n            style={styles.input}\n          />\n          <TextInput\n            onSubmitEditing={onCheckAccount}\n            onChangeText={onChangePasswd}\n            returnKeyType=\"done\"\n            secureTextEntry={true}\n            value={passwd}\n            placeholder={\"Please, Write Password...\"}\n            style={styles.input}\n          />\n          <TouchableOpacity style={styles.button} onPress={onCheckAccount}>\n            <Text style={styles.text}>Connect</Text>\n          </TouchableOpacity>\n          <View\n            style={{\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              marginTop: \"100%\",\n            }}\n          >\n            <Image\n              style={styles.tinyLog}\n              source={require(\"../../img/logo_h.png\")}\n            />\n          </View>\n        </View>\n      )}\n    </View>\n  );\n}\n\nexport default ConnectAccountScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\",\n  },\n  input: {\n    backgroundColor: \"tomato\",\n    marginHorizontal: 5,\n    marginVertical: 5,\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    borderRadius: 25,\n    fontSize: 18,\n    color: \"white\",\n  },\n  notifyTxt: {\n    backgroundColor: \"gray\",\n    marginTop: 10,\n    marginBottom: 5,\n    marginHorizontal: 5,\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    borderRadius: 15,\n  },\n  button: {\n    alignItems: \"flex-end\",\n    justifyContent: \"center\",\n    paddingVertical: 10,\n    paddingHorizontal: 25,\n    borderRadius: 20,\n    backgroundColor: \"white\",\n    textShadowColor: \"#3A3D40\",\n    textShadowOffset: {\n      width: 4,\n      height: 4,\n    },\n    textShadowRadius: 7,\n  },\n  text: {\n    fontSize: 20,\n    lineHeight: 30,\n    fontWeight: \"bold\",\n    letterSpacing: 0.25,\n    color: \"tomato\",\n  },\n  tinyLog: {\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    width: 100,\n    height: 100,\n    resizeMode: \"contain\",\n  },\n});\n","import * as React from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  TouchableOpacity,\n  Image,\n  ScrollView,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport { SERVER_URL, STORAGE_KEY } from \"../../Constants\";\n\nfunction ConfirmScreen({ navigation, route }) {\n  console.log(\"confirm-scr, rePaint\", route, account, target, balance);\n\n  const [account, setAccount] = React.useState(route.params.account);\n  const [target, setTarget] = React.useState(route.params.selected);\n  const [balance, setBalance] = React.useState(\"\");\n\n  React.useEffect(() => {\n    console.log(\"useEffect\", route);\n    if (route.params) {\n      console.log(\"route.params.account\", route.params.account);\n      console.log(\"route.params.selected\", route.params.selected);\n      setAccount(route.params.account);\n      setTarget(route.params.selected);\n    }\n  }, [route.params.account]);\n\n  const onChangeBalance = (payload) => {\n    setBalance(payload);\n  };\n\n  const transfer = async (userName, password, targetAddree, amount) => {\n    /* 계정 생성 : Cron-Domain 이슈를 서버에서 해결 */\n    const response = await fetch(\n      `${SERVER_URL}/v1/rpc/eth/transfer?account=${userName}&password=${password}&toAddress=${targetAddree}&amount=${amount}`\n    );\n    const json = await response.json();\n\n    console.log(\"transfer\", json);\n\n    const resCode = json.code;\n    if (resCode !== 200) {\n      setNotify(resCode + \" : \" + json.message);\n      return;\n    }\n\n    /** 지갑으로 이동\n     *  \"data\": {\n          \"account\": \"trackchain\",\n          \"address\": \"0x5e483bf7b01e75279513f4bb1cadd7e6ce87d407\",\n          \"balance\": 0.2822180899992\n        },\n     */\n    if (account !== null) {\n      account.balance = json.data.balance;\n      setAccount(account);\n      console.log(\"account\", account);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(account));\n    }\n  };\n\n  const onTransfer = async () => {\n    await transfer(account.account, account.password, target.address, balance);\n\n    console.log(\"onTransfer\", account);\n    navigation.navigate(\"Wallets\", { account });\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.text}>Source</Text>\n      <View style={styles.infoBox}>\n        <View style={{ flexDirection: \"row\", paddingVertical: 10 }}>\n          <Text style={styles.infoLab}>UserName</Text>\n          <Text style={styles.infoVal}>{`${account.account}`}</Text>\n        </View>\n        <View style={{ flexDirection: \"row\", paddingVertical: 10 }}>\n          <Text style={styles.infoLab}>Address</Text>\n          <Text style={styles.infoVal}>\n            {`${account.address.substring(0, 15)}`}...\n          </Text>\n        </View>\n        <View style={{ flexDirection: \"row\", paddingVertical: 10 }}>\n          <Text style={styles.infoLab}>Balance</Text>\n          <Text style={styles.infoVal}>{`${account.balance}`} ETH</Text>\n        </View>\n      </View>\n      <View style={{ alignItems: \"center\" }}>\n        <Fontisto name=\"arrow-down\" size={24} color=\"black\" />\n      </View>\n      <Text style={styles.text}>Target</Text>\n\n      <View style={styles.infoBox}>\n        <View style={{ flexDirection: \"row\", paddingVertical: 10 }}>\n          <Text style={styles.infoLab}>UserName</Text>\n          <Text style={styles.infoVal}>{`${target.account}`}</Text>\n        </View>\n        <View style={{ flexDirection: \"row\", paddingVertical: 10 }}>\n          <Text style={styles.infoLab}>Address</Text>\n          <Text style={styles.infoVal}>\n            {`${target.address.substring(0, 15)}`}...\n          </Text>\n        </View>\n      </View>\n      <View\n        style={{\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"space-around\",\n        }}\n      >\n        <TextInput\n          onSubmitEditing={onTransfer}\n          onChangeText={onChangeBalance}\n          returnKeyType=\"default\"\n          value={balance}\n          placeholder={\"Write Transfer balance...\"}\n          style={styles.input}\n        />\n        <TouchableOpacity style={styles.button} onPress={onTransfer}>\n          <Text style={styles.text}>Transfer</Text>\n        </TouchableOpacity>\n      </View>\n      <View\n        style={{\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Image\n          style={styles.tinyLog}\n          source={require(\"../../img/logo_h.png\")}\n        />\n      </View>\n    </ScrollView>\n  );\n}\n\nexport default ConfirmScreen;\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: \"white\" },\n  input: {\n    backgroundColor: \"tomato\",\n    marginHorizontal: 5,\n    marginVertical: 5,\n    paddingVertical: 10,\n    paddingHorizontal: 5,\n    borderRadius: 10,\n    fontSize: 18,\n    color: \"white\",\n  },\n  button: {\n    alignItems: \"flex-end\",\n    justifyContent: \"center\",\n    paddingVertical: 10,\n    paddingHorizontal: 25,\n    borderRadius: 20,\n    backgroundColor: \"white\",\n    textShadowColor: \"#3A3D40\",\n    textShadowOffset: {\n      width: 4,\n      height: 4,\n    },\n    textShadowRadius: 7,\n  },\n  text: {\n    fontSize: 20,\n    lineHeight: 30,\n    fontWeight: \"bold\",\n    letterSpacing: 0.25,\n    color: \"tomato\",\n    marginLeft: 10,\n  },\n  infoBox: {\n    height: 200,\n    backgroundColor: \"white\",\n    marginTop: 10,\n    marginBottom: 5,\n    marginHorizontal: 5,\n    paddingVertical: 5,\n    paddingHorizontal: 5,\n    borderRadius: 5,\n  },\n  infoLab: {\n    fontSize: 20,\n    backgroundColor: \"white\",\n    color: \"tomato\",\n    width: 100,\n    borderRadius: 5,\n    paddingVertical: 5,\n    marginRight: 10,\n    textShadowColor: \"gray\",\n    textShadowOffset: {\n      width: 4,\n      height: 4,\n    },\n    textShadowRadius: 7,\n  },\n  infoVal: {\n    fontSize: 20,\n    backgroundColor: \"gray\",\n    color: \"white\",\n    borderRadius: 5,\n    paddingVertical: 5,\n    paddingHorizontal: 5,\n  },\n  tinyLog: {\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    width: 100,\n    height: 100,\n    resizeMode: \"contain\",\n  },\n});\n","import * as React from \"react\";\nimport { Image, Text, Platform, View } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\n\n/* 메인 스크린 */\nimport HomeScreen from \"./Components/Home\";\nimport WalletsScreen from \"./Components/Wallets\";\n\n/* Wallets 스크린 */\nimport SendScreen from \"./Components/Wallets/SendScreen\";\nimport ActivityScreen from \"./Components/Wallets/ActivityScreen\";\nimport CreateAccountScreen from \"./Components/Accounts/CreateAccount\";\nimport ConnectAccountScreen from \"./Components/Accounts/ConnectAccount\";\nimport ConfirmScreen from \"./Components/Wallets/ConfirmScreen\";\n\n/* Stack Navigation */\nconst WholeStack = createNativeStackNavigator();\n\n/* Header Icon */\nexport function LogoIconTitle({ title }) {\n  return (\n    <View\n      style={{\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"flex-start\",\n      }}\n    >\n      <Image\n        style={{ width: 25, height: 25, resizeMode: \"contain\" }}\n        source={require(\"./img/logo.png\")}\n      />\n      <Text style={{ marginLeft: 10, fontWeight: \"bold\", color: \"tomato\" }}>\n        {`${title}`}\n      </Text>\n    </View>\n  );\n}\n\nexport function WelcomeScreen({ account, userList }) {\n  return (\n    <NavigationContainer>\n      <WholeStack.Navigator initialRouteName=\"Home\">\n        <WholeStack.Group>\n          <WholeStack.Screen\n            name=\"Home\"\n            component={HomeScreen}\n            initialParams={{ account, userList }}\n            options={{ headerShown: false }}\n          />\n          <WholeStack.Screen\n            name=\"CreateAccount\"\n            component={CreateAccountScreen}\n            initialParams={{ account, userList }}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => (\n                      <LogoIconTitle title={\"Create Account\"} />\n                    ),\n                  }\n                : {\n                    title: \"Create Account\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n          <WholeStack.Screen\n            name=\"ConnectAccount\"\n            component={ConnectAccountScreen}\n            initialParams={{ account, userList }}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => (\n                      <LogoIconTitle title={\"Connect Account\"} />\n                    ),\n                  }\n                : {\n                    title: \"Connect Account\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n          <WholeStack.Screen\n            name=\"Wallets\"\n            component={WalletsScreen}\n            initialParams={{ account, userList }}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => <LogoIconTitle title={\"Wallets\"} />,\n                  }\n                : {\n                    title: \"Wallets\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n          <WholeStack.Screen\n            name=\"Send\"\n            component={SendScreen}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => (\n                      <LogoIconTitle title={\"Select Transfer-Account\"} />\n                    ),\n                  }\n                : {\n                    title: \"Select Transfer-Account\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n          <WholeStack.Screen\n            name=\"Confirm\"\n            component={ConfirmScreen}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => (\n                      <LogoIconTitle title={\"Confirm Account\"} />\n                    ),\n                  }\n                : {\n                    title: \"Confirm Account\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n          <WholeStack.Screen\n            name=\"Activity\"\n            component={ActivityScreen}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => <LogoIconTitle title={\"Activity\"} />,\n                  }\n                : {\n                    title: \"Activity\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n        </WholeStack.Group>\n      </WholeStack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport function AccountScreen({ account, userList }) {\n  console.log(\"AccountScreen\", account, userList);\n\n  return (\n    <NavigationContainer>\n      <WholeStack.Navigator initialRouteName=\"Wallets\">\n        <WholeStack.Group initialParams={{ account, userList }}>\n          <WholeStack.Screen\n            name=\"Home\"\n            component={HomeScreen}\n            initialParams={{ account, userList }}\n            options={{ headerShown: false }}\n          />\n          <WholeStack.Screen\n            name=\"CreateAccount\"\n            component={CreateAccountScreen}\n            initialParams={{ account, userList }}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => (\n                      <LogoIconTitle title={\"Create Account\"} />\n                    ),\n                  }\n                : {\n                    title: \"Create Account\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n          <WholeStack.Screen\n            name=\"ConnectAccount\"\n            component={ConnectAccountScreen}\n            initialParams={{ account, userList }}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => (\n                      <LogoIconTitle title={\"Connect Account\"} />\n                    ),\n                  }\n                : {\n                    title: \"Connect Account\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n          <WholeStack.Screen\n            name=\"Wallets\"\n            component={WalletsScreen}\n            initialParams={{ account, userList }}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => <LogoIconTitle title={\"Wallets\"} />,\n                  }\n                : {\n                    title: \"Wallets\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n          <WholeStack.Screen\n            name=\"Send\"\n            component={SendScreen}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => (\n                      <LogoIconTitle title={\"Select Transfer-Account\"} />\n                    ),\n                  }\n                : {\n                    title: \"Select Transfer-Account\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n          <WholeStack.Screen\n            name=\"Confirm\"\n            component={ConfirmScreen}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => (\n                      <LogoIconTitle title={\"Confirm Account\"} />\n                    ),\n                  }\n                : {\n                    title: \"Confirm Account\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n          <WholeStack.Screen\n            name=\"Activity\"\n            component={ActivityScreen}\n            options={\n              Platform.OS === \"web\"\n                ? {\n                    headerTitle: () => <LogoIconTitle title={\"Activity\"} />,\n                  }\n                : {\n                    title: \"Activity\",\n                    headerStyle: {\n                      backgroundColor: \"tomato\",\n                    },\n                    headerTintColor: \"white\",\n                    headerTitleStyle: {\n                      fontWeight: \"bold\",\n                    },\n                  }\n            }\n          />\n        </WholeStack.Group>\n      </WholeStack.Navigator>\n    </NavigationContainer>\n  );\n}\n","import * as React from \"react\";\nimport { Platform } from \"react-native\";\n\n/* Local Storage */\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { LoadingScreen, STORAGE_KEY, STORAGE_KEY_USERLIST } from \"./Constants\";\nimport { WelcomeScreen, AccountScreen } from \"./Navigators\";\n\nfunction App() {\n  console.log(\"App, rePaint\", Platform.OS, account, userList, loading);\n\n  const [loading, setLoading] = React.useState(true);\n  const [account, setAccount] = React.useState(null);\n  const [userList, setUserList] = React.useState([]);\n\n  /* 최초 로컬에 저정된 사용자 정보 가져오기 */\n  // React.useEffect(async () => {\n  //   loadToAccount();\n  //   loadToUserList();\n  //   setLoading(false);\n  // }, []);\n\n  React.useEffect(() => {\n    async function fetchData() {\n      loadToAccount();\n      loadToUserList();\n      setLoading(false);\n    }\n    fetchData();\n  }, []);\n\n  /**\n   * 사용자 정보 조회\n   */\n  const loadToAccount = async () => {\n    const rawData = await AsyncStorage.getItem(STORAGE_KEY);\n    console.log(\"loadToAccount:\", rawData);\n    if (rawData !== null) {\n      const ac = await JSON.parse(rawData);\n      console.log(\"loadToAccount:\", ac);\n      setAccount(ac);\n    }\n  };\n\n  /**\n   * 사용자 리스트 정보 조회\n   */\n  const loadToUserList = async () => {\n    const rawData = await AsyncStorage.getItem(STORAGE_KEY_USERLIST);\n    console.log(\"loadToUserList:\", rawData);\n    if (rawData !== null) {\n      const usrlist = await JSON.parse(rawData);\n      console.log(\"loadToUserList:\", usrlist);\n      setUserList(usrlist);\n    }\n  };\n\n  return (\n    <>\n      {loading ? (\n        <LoadingScreen />\n      ) : account === null ? (\n        <WelcomeScreen account={account} userList={userList} />\n      ) : (\n        <AccountScreen account={account} userList={userList} />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo_h.b94085fd.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.dd9841fd.png\";"],"sourceRoot":""}